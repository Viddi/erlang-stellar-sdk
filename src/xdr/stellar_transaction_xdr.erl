%%
%% xdr/stellar_transaction_xdr was generated by erpcgen (do not edit)
%% date: Feb 19 15:01:45 2018
%%
-module(stellar_transaction_xdr).

-export([enc_Hash/1, dec_Hash/2]).
-export([enc_uint256/1, dec_uint256/2]).
-export([enc_uint32/1, dec_uint32/2]).
-export([enc_int32/1, dec_int32/2]).
-export([enc_uint64/1, dec_uint64/2]).
-export([enc_int64/1, dec_int64/2]).
-export([enc_CryptoKeyType/1, dec_CryptoKeyType/2]).
-export([enc_PublicKeyType/1, dec_PublicKeyType/2]).
-export([enc_SignerKeyType/1, dec_SignerKeyType/2]).
-export([enc_PublicKey/1, dec_PublicKey/2]).
-export([enc_SignerKey/1, dec_SignerKey/2]).
-export([enc_Signature/1, dec_Signature/2]).
-export([enc_SignatureHint/1, dec_SignatureHint/2]).
-export([enc_NodeID/1, dec_NodeID/2]).
-export([enc_Curve25519Secret/1, dec_Curve25519Secret/2]).
-export([enc_Curve25519Public/1, dec_Curve25519Public/2]).
-export([enc_HmacSha256Key/1, dec_HmacSha256Key/2]).
-export([enc_HmacSha256Mac/1, dec_HmacSha256Mac/2]).
-export([enc_AccountID/1, dec_AccountID/2]).
-export([enc_Thresholds/1, dec_Thresholds/2]).
-export([enc_string32/1, dec_string32/2]).
-export([enc_string64/1, dec_string64/2]).
-export([enc_SequenceNumber/1, dec_SequenceNumber/2]).
-export([enc_DataValue/1, dec_DataValue/2]).
-export([enc_AssetType/1, dec_AssetType/2]).
-export([enc_Asset/1, dec_Asset/2]).
-export([enc_Price/1, dec_Price/2]).
-export([enc_ThresholdIndexes/1, dec_ThresholdIndexes/2]).
-export([enc_LedgerEntryType/1, dec_LedgerEntryType/2]).
-export([enc_Signer/1, dec_Signer/2]).
-export([enc_AccountFlags/1, dec_AccountFlags/2]).
-export([enc_AccountEntry/1, dec_AccountEntry/2]).
-export([enc_TrustLineFlags/1, dec_TrustLineFlags/2]).
-export([enc_TrustLineEntry/1, dec_TrustLineEntry/2]).
-export([enc_OfferEntryFlags/1, dec_OfferEntryFlags/2]).
-export([enc_OfferEntry/1, dec_OfferEntry/2]).
-export([enc_DataEntry/1, dec_DataEntry/2]).
-export([enc_LedgerEntry/1, dec_LedgerEntry/2]).
-export([enc_EnvelopeType/1, dec_EnvelopeType/2]).
-export([enc_DecoratedSignature/1, dec_DecoratedSignature/2]).
-export([enc_OperationType/1, dec_OperationType/2]).
-export([enc_CreateAccountOp/1, dec_CreateAccountOp/2]).
-export([enc_PaymentOp/1, dec_PaymentOp/2]).
-export([enc_PathPaymentOp/1, dec_PathPaymentOp/2]).
-export([enc_ManageOfferOp/1, dec_ManageOfferOp/2]).
-export([enc_CreatePassiveOfferOp/1, dec_CreatePassiveOfferOp/2]).
-export([enc_SetOptionsOp/1, dec_SetOptionsOp/2]).
-export([enc_ChangeTrustOp/1, dec_ChangeTrustOp/2]).
-export([enc_AllowTrustOp/1, dec_AllowTrustOp/2]).
-export([enc_ManageDataOp/1, dec_ManageDataOp/2]).
-export([enc_Operation/1, dec_Operation/2]).
-export([enc_MemoType/1, dec_MemoType/2]).
-export([enc_Memo/1, dec_Memo/2]).
-export([enc_TimeBounds/1, dec_TimeBounds/2]).
-export([enc_Transaction/1, dec_Transaction/2]).
-export([enc_TransactionSignaturePayload/1, dec_TransactionSignaturePayload/2]).
-export([enc_TransactionEnvelope/1, dec_TransactionEnvelope/2]).
-export([enc_ClaimOfferAtom/1, dec_ClaimOfferAtom/2]).
-export([enc_CreateAccountResultCode/1, dec_CreateAccountResultCode/2]).
-export([enc_CreateAccountResult/1, dec_CreateAccountResult/2]).
-export([enc_PaymentResultCode/1, dec_PaymentResultCode/2]).
-export([enc_PaymentResult/1, dec_PaymentResult/2]).
-export([enc_PathPaymentResultCode/1, dec_PathPaymentResultCode/2]).
-export([enc_SimplePaymentResult/1, dec_SimplePaymentResult/2]).
-export([enc_PathPaymentResult/1, dec_PathPaymentResult/2]).
-export([enc_ManageOfferResultCode/1, dec_ManageOfferResultCode/2]).
-export([enc_ManageOfferEffect/1, dec_ManageOfferEffect/2]).
-export([enc_ManageOfferSuccessResult/1, dec_ManageOfferSuccessResult/2]).
-export([enc_ManageOfferResult/1, dec_ManageOfferResult/2]).
-export([enc_SetOptionsResultCode/1, dec_SetOptionsResultCode/2]).
-export([enc_SetOptionsResult/1, dec_SetOptionsResult/2]).
-export([enc_ChangeTrustResultCode/1, dec_ChangeTrustResultCode/2]).
-export([enc_ChangeTrustResult/1, dec_ChangeTrustResult/2]).
-export([enc_AllowTrustResultCode/1, dec_AllowTrustResultCode/2]).
-export([enc_AllowTrustResult/1, dec_AllowTrustResult/2]).
-export([enc_AccountMergeResultCode/1, dec_AccountMergeResultCode/2]).
-export([enc_AccountMergeResult/1, dec_AccountMergeResult/2]).
-export([enc_InflationResultCode/1, dec_InflationResultCode/2]).
-export([enc_InflationPayout/1, dec_InflationPayout/2]).
-export([enc_InflationResult/1, dec_InflationResult/2]).
-export([enc_ManageDataResultCode/1, dec_ManageDataResultCode/2]).
-export([enc_ManageDataResult/1, dec_ManageDataResult/2]).
-export([enc_OperationResultCode/1, dec_OperationResultCode/2]).
-export([enc_OperationResult/1, dec_OperationResult/2]).
-export([enc_TransactionResultCode/1, dec_TransactionResultCode/2]).
-export([enc_TransactionResult/1, dec_TransactionResult/2]).

enc_Hash(_1) ->
  case io_list_len(_1) of
    32 ->
      _1;
    _ ->
      exit({xdr, limit})
  end.

dec_Hash(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/binary, _/binary>> = _1,
    {_3, _2 + 32}
  end.

enc_uint256(_1) ->
  case io_list_len(_1) of
    32 ->
      _1;
    _ ->
      exit({xdr, limit})
  end.

dec_uint256(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/binary, _/binary>> = _1,
    {_3, _2 + 32}
  end.

enc_uint32(_1) ->
  <<_1:32>>.

dec_uint32(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/unsigned, _/binary>> = _1,
    {_3, _2 + 4}
  end.

enc_int32(_1) ->
  <<_1:32>>.

dec_int32(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    {_3, _2 + 4}
  end.

enc_uint64(_1) ->
  <<_1:64>>.

dec_uint64(_1, _2) ->
  begin
    <<_:_2/binary, _3:64/unsigned, _/binary>> = _1,
    {_3, _2 + 8}
  end.

enc_int64(_1) ->
  <<_1:64>>.

dec_int64(_1, _2) ->
  begin
    <<_:_2/binary, _3:64/signed, _/binary>> = _1,
    {_3, _2 + 8}
  end.

enc_CryptoKeyType(_1) ->
  case _1 of
    'KEY_TYPE_ED25519' ->
      <<0:32>>;
    'KEY_TYPE_PRE_AUTH_TX' ->
      <<1:32>>;
    'KEY_TYPE_HASH_X' ->
      <<2:32>>
  end.

dec_CryptoKeyType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'KEY_TYPE_ED25519', _2 + 4};
      1 ->
        {'KEY_TYPE_PRE_AUTH_TX', _2 + 4};
      2 ->
        {'KEY_TYPE_HASH_X', _2 + 4}
    end
  end.

dec_CryptoKeyType_i2a(_4) ->
  case _4 of
    0 ->
      'KEY_TYPE_ED25519';
    1 ->
      'KEY_TYPE_PRE_AUTH_TX';
    2 ->
      'KEY_TYPE_HASH_X'
  end.

enc_PublicKeyType(_1) ->
  case _1 of
    'PUBLIC_KEY_TYPE_ED25519' ->
      <<0:32>>
  end.

dec_PublicKeyType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'PUBLIC_KEY_TYPE_ED25519', _2 + 4}
    end
  end.

dec_PublicKeyType_i2a(_4) ->
  case _4 of
    0 ->
      'PUBLIC_KEY_TYPE_ED25519'
  end.

enc_SignerKeyType(_1) ->
  case _1 of
    'SIGNER_KEY_TYPE_ED25519' ->
      <<0:32>>;
    'SIGNER_KEY_TYPE_PRE_AUTH_TX' ->
      <<1:32>>;
    'SIGNER_KEY_TYPE_HASH_X' ->
      <<2:32>>
  end.

dec_SignerKeyType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'SIGNER_KEY_TYPE_ED25519', _2 + 4};
      1 ->
        {'SIGNER_KEY_TYPE_PRE_AUTH_TX', _2 + 4};
      2 ->
        {'SIGNER_KEY_TYPE_HASH_X', _2 + 4}
    end
  end.

dec_SignerKeyType_i2a(_4) ->
  case _4 of
    0 ->
      'SIGNER_KEY_TYPE_ED25519';
    1 ->
      'SIGNER_KEY_TYPE_PRE_AUTH_TX';
    2 ->
      'SIGNER_KEY_TYPE_HASH_X'
  end.

enc_PublicKey(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_PublicKeyType(_2),
        case _2 of
          'PUBLIC_KEY_TYPE_ED25519' ->
            enc_uint256(_3)
        end]
  end.

dec_PublicKey(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = dec_uint256(_1, _6),
        {{'PUBLIC_KEY_TYPE_ED25519', _4}, _5}
    end
  end.

enc_SignerKey(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_SignerKeyType(_2),
        case _2 of
          'SIGNER_KEY_TYPE_ED25519' ->
            enc_uint256(_3);
          'SIGNER_KEY_TYPE_PRE_AUTH_TX' ->
            enc_uint256(_3);
          'SIGNER_KEY_TYPE_HASH_X' ->
            enc_uint256(_3)
        end]
  end.

dec_SignerKey(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = dec_uint256(_1, _6),
        {{'SIGNER_KEY_TYPE_ED25519', _4}, _5};
      1 ->
        {_4, _5} = dec_uint256(_1, _6),
        {{'SIGNER_KEY_TYPE_PRE_AUTH_TX', _4}, _5};
      2 ->
        {_4, _5} = dec_uint256(_1, _6),
        {{'SIGNER_KEY_TYPE_HASH_X', _4}, _5}
    end
  end.

enc_Signature(_1) ->
  begin
    _2 = io_list_len(_1),
    if
      _2 =< 64 ->
        [<<_2:32/unsigned>>, _1, enc_align(_2)];
      true ->
        exit({xdr, limit})
    end
  end.

dec_Signature(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/unsigned, _/binary>> = _1,
    if
      _3 > 64 ->
        exit({xdr, limit});
      true ->
        _4 = _2 + 4,
        <<_:_4/binary, _5:_3/binary, _/binary>> = _1,
        {_5, _4 + align(_3)}
    end
  end.

enc_SignatureHint(_1) ->
  case io_list_len(_1) of
    4 ->
      _1;
    _ ->
      exit({xdr, limit})
  end.

dec_SignatureHint(_1, _2) ->
  begin
    <<_:_2/binary, _3:4/binary, _/binary>> = _1,
    {_3, _2 + 4}
  end.

enc_NodeID(_1) ->
  enc_PublicKey(_1).

dec_NodeID(_1, _2) ->
  dec_PublicKey(_1, _2).

enc_Curve25519Secret(_1) ->
  case _1 of
    {_2} ->
      [case io_list_len(_2) of
         32 ->
           _2;
         _ ->
           exit({xdr, limit})
       end]
  end.

dec_Curve25519Secret(_1, _2) ->
  begin
    begin
      <<_:_2/binary, _3:32/binary, _/binary>> = _1,
      _4 = _2 + 32
    end,
    {{_3}, _4}
  end.

enc_Curve25519Public(_1) ->
  case _1 of
    {_2} ->
      [case io_list_len(_2) of
         32 ->
           _2;
         _ ->
           exit({xdr, limit})
       end]
  end.

dec_Curve25519Public(_1, _2) ->
  begin
    begin
      <<_:_2/binary, _3:32/binary, _/binary>> = _1,
      _4 = _2 + 32
    end,
    {{_3}, _4}
  end.

enc_HmacSha256Key(_1) ->
  case _1 of
    {_2} ->
      [case io_list_len(_2) of
         32 ->
           _2;
         _ ->
           exit({xdr, limit})
       end]
  end.

dec_HmacSha256Key(_1, _2) ->
  begin
    begin
      <<_:_2/binary, _3:32/binary, _/binary>> = _1,
      _4 = _2 + 32
    end,
    {{_3}, _4}
  end.

enc_HmacSha256Mac(_1) ->
  case _1 of
    {_2} ->
      [case io_list_len(_2) of
         32 ->
           _2;
         _ ->
           exit({xdr, limit})
       end]
  end.

dec_HmacSha256Mac(_1, _2) ->
  begin
    begin
      <<_:_2/binary, _3:32/binary, _/binary>> = _1,
      _4 = _2 + 32
    end,
    {{_3}, _4}
  end.

enc_AccountID(_1) ->
  enc_PublicKey(_1).

dec_AccountID(_1, _2) ->
  dec_PublicKey(_1, _2).

enc_Thresholds(_1) ->
  case io_list_len(_1) of
    4 ->
      _1;
    _ ->
      exit({xdr, limit})
  end.

dec_Thresholds(_1, _2) ->
  begin
    <<_:_2/binary, _3:4/binary, _/binary>> = _1,
    {_3, _2 + 4}
  end.

enc_string32(_1) ->
  begin
    _2 = io_list_len(_1),
    if
      _2 =< 32 ->
        [<<_2:32/unsigned>>, _1, enc_align(_2)];
      true ->
        exit({xdr, limit})
    end
  end.

dec_string32(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/unsigned, _/binary>> = _1,
    if
      _3 > 32 ->
        exit({xdr, limit});
      true ->
        _4 = _2 + 4,
        <<_:_4/binary, _5:_3/binary, _/binary>> = _1,
        {_5, _4 + align(_3)}
    end
  end.

enc_string64(_1) ->
  begin
    _2 = io_list_len(_1),
    if
      _2 =< 64 ->
        [<<_2:32/unsigned>>, _1, enc_align(_2)];
      true ->
        exit({xdr, limit})
    end
  end.

dec_string64(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/unsigned, _/binary>> = _1,
    if
      _3 > 64 ->
        exit({xdr, limit});
      true ->
        _4 = _2 + 4,
        <<_:_4/binary, _5:_3/binary, _/binary>> = _1,
        {_5, _4 + align(_3)}
    end
  end.

enc_SequenceNumber(_1) ->
  enc_uint64(_1).

dec_SequenceNumber(_1, _2) ->
  dec_uint64(_1, _2).

enc_DataValue(_1) ->
  begin
    _2 = io_list_len(_1),
    if
      _2 =< 64 ->
        [<<_2:32/unsigned>>, _1, enc_align(_2)];
      true ->
        exit({xdr, limit})
    end
  end.

dec_DataValue(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/unsigned, _/binary>> = _1,
    if
      _3 > 64 ->
        exit({xdr, limit});
      true ->
        _4 = _2 + 4,
        <<_:_4/binary, _5:_3/binary, _/binary>> = _1,
        {_5, _4 + align(_3)}
    end
  end.

enc_AssetType(_1) ->
  case _1 of
    'ASSET_TYPE_NATIVE' ->
      <<0:32>>;
    'ASSET_TYPE_CREDIT_ALPHANUM4' ->
      <<1:32>>;
    'ASSET_TYPE_CREDIT_ALPHANUM12' ->
      <<2:32>>
  end.

dec_AssetType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'ASSET_TYPE_NATIVE', _2 + 4};
      1 ->
        {'ASSET_TYPE_CREDIT_ALPHANUM4', _2 + 4};
      2 ->
        {'ASSET_TYPE_CREDIT_ALPHANUM12', _2 + 4}
    end
  end.

dec_AssetType_i2a(_4) ->
  case _4 of
    0 ->
      'ASSET_TYPE_NATIVE';
    1 ->
      'ASSET_TYPE_CREDIT_ALPHANUM4';
    2 ->
      'ASSET_TYPE_CREDIT_ALPHANUM12'
  end.

enc_Asset(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_AssetType(_2),
        case _2 of
          'ASSET_TYPE_NATIVE' ->
            [];
          'ASSET_TYPE_CREDIT_ALPHANUM4' ->
            case _3 of
              {_7, _6} ->
                [case io_list_len(_7) of
                   4 ->
                     _7;
                   _ ->
                     exit({xdr, limit})
                 end,
                  enc_AccountID(_6)]
            end;
          'ASSET_TYPE_CREDIT_ALPHANUM12' ->
            case _3 of
              {_5, _4} ->
                [case io_list_len(_5) of
                   12 ->
                     _5;
                   _ ->
                     exit({xdr, limit})
                 end,
                  enc_AccountID(_4)]
            end
        end]
  end.

dec_Asset(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'ASSET_TYPE_NATIVE', _4}, _5};
      1 ->
        {_4, _5} =
          begin
            begin
              <<_:_6/binary, _11:4/binary, _/binary>> = _1,
              _12 = _6 + 4
            end,
            {_13, _14} = dec_AccountID(_1, _12),
            {{_11, _13}, _14}
          end,
        {{'ASSET_TYPE_CREDIT_ALPHANUM4', _4}, _5};
      2 ->
        {_4, _5} =
          begin
            begin
              <<_:_6/binary, _7:12/binary, _/binary>> = _1,
              _8 = _6 + 12
            end,
            {_9, _10} = dec_AccountID(_1, _8),
            {{_7, _9}, _10}
          end,
        {{'ASSET_TYPE_CREDIT_ALPHANUM12', _4}, _5}
    end
  end.

enc_Price(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_int32(_3), enc_int32(_2)]
  end.

dec_Price(_1, _2) ->
  begin
    {_3, _4} = dec_int32(_1, _2),
    {_5, _6} = dec_int32(_1, _4),
    {{_3, _5}, _6}
  end.

enc_ThresholdIndexes(_1) ->
  case _1 of
    'THRESHOLD_MASTER_WEIGHT' ->
      <<0:32>>;
    'THRESHOLD_LOW' ->
      <<1:32>>;
    'THRESHOLD_MED' ->
      <<2:32>>;
    'THRESHOLD_HIGH' ->
      <<3:32>>
  end.

dec_ThresholdIndexes(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'THRESHOLD_MASTER_WEIGHT', _2 + 4};
      1 ->
        {'THRESHOLD_LOW', _2 + 4};
      2 ->
        {'THRESHOLD_MED', _2 + 4};
      3 ->
        {'THRESHOLD_HIGH', _2 + 4}
    end
  end.

dec_ThresholdIndexes_i2a(_4) ->
  case _4 of
    0 ->
      'THRESHOLD_MASTER_WEIGHT';
    1 ->
      'THRESHOLD_LOW';
    2 ->
      'THRESHOLD_MED';
    3 ->
      'THRESHOLD_HIGH'
  end.

enc_LedgerEntryType(_1) ->
  case _1 of
    'ACCOUNT' ->
      <<0:32>>;
    'TRUSTLINE' ->
      <<1:32>>;
    'OFFER' ->
      <<2:32>>;
    'DATA' ->
      <<3:32>>
  end.

dec_LedgerEntryType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'ACCOUNT', _2 + 4};
      1 ->
        {'TRUSTLINE', _2 + 4};
      2 ->
        {'OFFER', _2 + 4};
      3 ->
        {'DATA', _2 + 4}
    end
  end.

dec_LedgerEntryType_i2a(_4) ->
  case _4 of
    0 ->
      'ACCOUNT';
    1 ->
      'TRUSTLINE';
    2 ->
      'OFFER';
    3 ->
      'DATA'
  end.

enc_Signer(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_SignerKey(_3), enc_uint32(_2)]
  end.

dec_Signer(_1, _2) ->
  begin
    {_3, _4} = dec_SignerKey(_1, _2),
    {_5, _6} = dec_uint32(_1, _4),
    {{_3, _5}, _6}
  end.

enc_AccountFlags(_1) ->
  case _1 of
    'AUTH_REQUIRED_FLAG' ->
      <<1:32>>;
    'AUTH_REVOCABLE_FLAG' ->
      <<2:32>>;
    'AUTH_IMMUTABLE_FLAG' ->
      <<4:32>>
  end.

dec_AccountFlags(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      1 ->
        {'AUTH_REQUIRED_FLAG', _2 + 4};
      2 ->
        {'AUTH_REVOCABLE_FLAG', _2 + 4};
      4 ->
        {'AUTH_IMMUTABLE_FLAG', _2 + 4}
    end
  end.

dec_AccountFlags_i2a(_4) ->
  case _4 of
    1 ->
      'AUTH_REQUIRED_FLAG';
    2 ->
      'AUTH_REVOCABLE_FLAG';
    4 ->
      'AUTH_IMMUTABLE_FLAG'
  end.

enc_AccountEntry(_1) ->
  case _1 of
    {_15, _14, _13, _12, _11, _10, _9, _8, _5, _2} ->
      [enc_AccountID(_15),
        enc_int64(_14),
        enc_SequenceNumber(_13),
        enc_uint32(_12),
        case _11 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_AccountID(_11)]
        end,
        enc_uint32(_10),
        enc_string32(_9),
        enc_Thresholds(_8),
        begin
          _7 = length(_5),
          if
            _7 =< 20 ->
              [<<_7:32/unsigned>>,
                lists:map(fun(_6) ->
                  enc_Signer(_6)
                          end,
                  _5)];
            true ->
              exit({xdr, limit})
          end
        end,
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_AccountEntry(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_int64(_1, _4),
    {_7, _8} = dec_SequenceNumber(_1, _6),
    {_9, _10} = dec_uint32(_1, _8),
    {_11, _12} =
      begin
        <<_:_10/binary, _13:32/unsigned, _/binary>> = _1,
        _14 = _10 + 4,
        if
          _13 == 0 ->
            {void, _14};
          _13 == 1 ->
            dec_AccountID(_1, _14)
        end
      end,
    {_15, _16} = dec_uint32(_1, _12),
    {_17, _18} = dec_string32(_1, _16),
    {_19, _20} = dec_Thresholds(_1, _18),
    {_21, _22} =
      begin
        <<_:_20/binary, _23:32/unsigned, _/binary>> = _1,
        map_elem(fun(_24, _25) ->
          dec_Signer(_24, _25)
                 end,
          _1,
          _20 + 4,
          20,
          _23)
      end,
    {_26, _27} =
      begin
        <<_:_22/binary, _28:32/signed, _/binary>> = _1,
        _31 = _22 + 4,
        case _28 of
          0 ->
            {_29, _30} = {void, _31},
            {{0, _29}, _30}
        end
      end,
    {{_3, _5, _7, _9, _11, _15, _17, _19, _21, _26}, _27}
  end.

enc_TrustLineFlags(_1) ->
  case _1 of
    'AUTHORIZED_FLAG' ->
      <<1:32>>
  end.

dec_TrustLineFlags(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      1 ->
        {'AUTHORIZED_FLAG', _2 + 4}
    end
  end.

dec_TrustLineFlags_i2a(_4) ->
  case _4 of
    1 ->
      'AUTHORIZED_FLAG'
  end.

enc_TrustLineEntry(_1) ->
  case _1 of
    {_9, _8, _7, _6, _5, _2} ->
      [enc_AccountID(_9),
        enc_Asset(_8),
        enc_int64(_7),
        enc_int64(_6),
        enc_uint32(_5),
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_TrustLineEntry(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_Asset(_1, _4),
    {_7, _8} = dec_int64(_1, _6),
    {_9, _10} = dec_int64(_1, _8),
    {_11, _12} = dec_uint32(_1, _10),
    {_13, _14} =
      begin
        <<_:_12/binary, _15:32/signed, _/binary>> = _1,
        _18 = _12 + 4,
        case _15 of
          0 ->
            {_16, _17} = {void, _18},
            {{0, _16}, _17}
        end
      end,
    {{_3, _5, _7, _9, _11, _13}, _14}
  end.

enc_OfferEntryFlags(_1) ->
  case _1 of
    'PASSIVE_FLAG' ->
      <<1:32>>
  end.

dec_OfferEntryFlags(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      1 ->
        {'PASSIVE_FLAG', _2 + 4}
    end
  end.

dec_OfferEntryFlags_i2a(_4) ->
  case _4 of
    1 ->
      'PASSIVE_FLAG'
  end.

enc_OfferEntry(_1) ->
  case _1 of
    {_11, _10, _9, _8, _7, _6, _5, _2} ->
      [enc_AccountID(_11),
        enc_uint64(_10),
        enc_Asset(_9),
        enc_Asset(_8),
        enc_int64(_7),
        enc_Price(_6),
        enc_uint32(_5),
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_OfferEntry(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_uint64(_1, _4),
    {_7, _8} = dec_Asset(_1, _6),
    {_9, _10} = dec_Asset(_1, _8),
    {_11, _12} = dec_int64(_1, _10),
    {_13, _14} = dec_Price(_1, _12),
    {_15, _16} = dec_uint32(_1, _14),
    {_17, _18} =
      begin
        <<_:_16/binary, _19:32/signed, _/binary>> = _1,
        _22 = _16 + 4,
        case _19 of
          0 ->
            {_20, _21} = {void, _22},
            {{0, _20}, _21}
        end
      end,
    {{_3, _5, _7, _9, _11, _13, _15, _17}, _18}
  end.

enc_DataEntry(_1) ->
  case _1 of
    {_7, _6, _5, _2} ->
      [enc_AccountID(_7),
        enc_string64(_6),
        enc_DataValue(_5),
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_DataEntry(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_string64(_1, _4),
    {_7, _8} = dec_DataValue(_1, _6),
    {_9, _10} =
      begin
        <<_:_8/binary, _11:32/signed, _/binary>> = _1,
        _14 = _8 + 4,
        case _11 of
          0 ->
            {_12, _13} = {void, _14},
            {{0, _12}, _13}
        end
      end,
    {{_3, _5, _7, _9}, _10}
  end.

enc_LedgerEntry(_1) ->
  case _1 of
    {_8, _5, _2} ->
      [enc_uint32(_8),
        case _5 of
          {_6, _7} ->
            [enc_LedgerEntryType(_6),
              case _6 of
                'ACCOUNT' ->
                  enc_AccountEntry(_7);
                'TRUSTLINE' ->
                  enc_TrustLineEntry(_7);
                'OFFER' ->
                  enc_OfferEntry(_7);
                'DATA' ->
                  enc_DataEntry(_7)
              end]
        end,
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_LedgerEntry(_1, _2) ->
  begin
    {_3, _4} = dec_uint32(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/signed, _/binary>> = _1,
        _10 = _4 + 4,
        case _7 of
          0 ->
            {_8, _9} = dec_AccountEntry(_1, _10),
            {{'ACCOUNT', _8}, _9};
          1 ->
            {_8, _9} = dec_TrustLineEntry(_1, _10),
            {{'TRUSTLINE', _8}, _9};
          2 ->
            {_8, _9} = dec_OfferEntry(_1, _10),
            {{'OFFER', _8}, _9};
          3 ->
            {_8, _9} = dec_DataEntry(_1, _10),
            {{'DATA', _8}, _9}
        end
      end,
    {_11, _12} =
      begin
        <<_:_6/binary, _13:32/signed, _/binary>> = _1,
        _16 = _6 + 4,
        case _13 of
          0 ->
            {_14, _15} = {void, _16},
            {{0, _14}, _15}
        end
      end,
    {{_3, _5, _11}, _12}
  end.

enc_EnvelopeType(_1) ->
  case _1 of
    'ENVELOPE_TYPE_SCP' ->
      <<1:32>>;
    'ENVELOPE_TYPE_TX' ->
      <<2:32>>;
    'ENVELOPE_TYPE_AUTH' ->
      <<3:32>>
  end.

dec_EnvelopeType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      1 ->
        {'ENVELOPE_TYPE_SCP', _2 + 4};
      2 ->
        {'ENVELOPE_TYPE_TX', _2 + 4};
      3 ->
        {'ENVELOPE_TYPE_AUTH', _2 + 4}
    end
  end.

dec_EnvelopeType_i2a(_4) ->
  case _4 of
    1 ->
      'ENVELOPE_TYPE_SCP';
    2 ->
      'ENVELOPE_TYPE_TX';
    3 ->
      'ENVELOPE_TYPE_AUTH'
  end.

enc_DecoratedSignature(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_SignatureHint(_3), enc_Signature(_2)]
  end.

dec_DecoratedSignature(_1, _2) ->
  begin
    {_3, _4} = dec_SignatureHint(_1, _2),
    {_5, _6} = dec_Signature(_1, _4),
    {{_3, _5}, _6}
  end.

enc_OperationType(_1) ->
  case _1 of
    'CREATE_ACCOUNT' ->
      <<0:32>>;
    'PAYMENT' ->
      <<1:32>>;
    'PATH_PAYMENT' ->
      <<2:32>>;
    'MANAGE_OFFER' ->
      <<3:32>>;
    'CREATE_PASSIVE_OFFER' ->
      <<4:32>>;
    'SET_OPTIONS' ->
      <<5:32>>;
    'CHANGE_TRUST' ->
      <<6:32>>;
    'ALLOW_TRUST' ->
      <<7:32>>;
    'ACCOUNT_MERGE' ->
      <<8:32>>;
    'INFLATION' ->
      <<9:32>>;
    'MANAGE_DATA' ->
      <<10:32>>
  end.

dec_OperationType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'CREATE_ACCOUNT', _2 + 4};
      1 ->
        {'PAYMENT', _2 + 4};
      2 ->
        {'PATH_PAYMENT', _2 + 4};
      3 ->
        {'MANAGE_OFFER', _2 + 4};
      4 ->
        {'CREATE_PASSIVE_OFFER', _2 + 4};
      5 ->
        {'SET_OPTIONS', _2 + 4};
      6 ->
        {'CHANGE_TRUST', _2 + 4};
      7 ->
        {'ALLOW_TRUST', _2 + 4};
      8 ->
        {'ACCOUNT_MERGE', _2 + 4};
      9 ->
        {'INFLATION', _2 + 4};
      10 ->
        {'MANAGE_DATA', _2 + 4}
    end
  end.

dec_OperationType_i2a(_4) ->
  case _4 of
    0 ->
      'CREATE_ACCOUNT';
    1 ->
      'PAYMENT';
    2 ->
      'PATH_PAYMENT';
    3 ->
      'MANAGE_OFFER';
    4 ->
      'CREATE_PASSIVE_OFFER';
    5 ->
      'SET_OPTIONS';
    6 ->
      'CHANGE_TRUST';
    7 ->
      'ALLOW_TRUST';
    8 ->
      'ACCOUNT_MERGE';
    9 ->
      'INFLATION';
    10 ->
      'MANAGE_DATA'
  end.

enc_CreateAccountOp(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_AccountID(_3), enc_int64(_2)]
  end.

dec_CreateAccountOp(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_int64(_1, _4),
    {{_3, _5}, _6}
  end.

enc_PaymentOp(_1) ->
  case _1 of
    {_4, _3, _2} ->
      [enc_AccountID(_4), enc_Asset(_3), enc_int64(_2)]
  end.

dec_PaymentOp(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_Asset(_1, _4),
    {_7, _8} = dec_int64(_1, _6),
    {{_3, _5, _7}, _8}
  end.

enc_PathPaymentOp(_1) ->
  case _1 of
    {_9, _8, _7, _6, _5, _2} ->
      [enc_Asset(_9),
        enc_int64(_8),
        enc_AccountID(_7),
        enc_Asset(_6),
        enc_int64(_5),
        begin
          _4 = length(_2),
          if
            _4 =< 5 ->
              [<<_4:32/unsigned>>,
                lists:map(fun(_3) ->
                  enc_Asset(_3)
                          end,
                  _2)];
            true ->
              exit({xdr, limit})
          end
        end]
  end.

dec_PathPaymentOp(_1, _2) ->
  begin
    {_3, _4} = dec_Asset(_1, _2),
    {_5, _6} = dec_int64(_1, _4),
    {_7, _8} = dec_AccountID(_1, _6),
    {_9, _10} = dec_Asset(_1, _8),
    {_11, _12} = dec_int64(_1, _10),
    {_13, _14} =
      begin
        <<_:_12/binary, _15:32/unsigned, _/binary>> = _1,
        map_elem(fun(_16, _17) ->
          dec_Asset(_16, _17)
                 end,
          _1,
          _12 + 4,
          5,
          _15)
      end,
    {{_3, _5, _7, _9, _11, _13}, _14}
  end.

enc_ManageOfferOp(_1) ->
  case _1 of
    {_6, _5, _4, _3, _2} ->
      [enc_Asset(_6),
        enc_Asset(_5),
        enc_int64(_4),
        enc_Price(_3),
        enc_uint64(_2)]
  end.

dec_ManageOfferOp(_1, _2) ->
  begin
    {_3, _4} = dec_Asset(_1, _2),
    {_5, _6} = dec_Asset(_1, _4),
    {_7, _8} = dec_int64(_1, _6),
    {_9, _10} = dec_Price(_1, _8),
    {_11, _12} = dec_uint64(_1, _10),
    {{_3, _5, _7, _9, _11}, _12}
  end.

enc_CreatePassiveOfferOp(_1) ->
  case _1 of
    {_5, _4, _3, _2} ->
      [enc_Asset(_5), enc_Asset(_4), enc_int64(_3), enc_Price(_2)]
  end.

dec_CreatePassiveOfferOp(_1, _2) ->
  begin
    {_3, _4} = dec_Asset(_1, _2),
    {_5, _6} = dec_Asset(_1, _4),
    {_7, _8} = dec_int64(_1, _6),
    {_9, _10} = dec_Price(_1, _8),
    {{_3, _5, _7, _9}, _10}
  end.

enc_SetOptionsOp(_1) ->
  case _1 of
    {_10, _9, _8, _7, _6, _5, _4, _3, _2} ->
      [case _10 of
         void ->
           <<0:32>>;
         _ ->
           [<<1:32>>, enc_AccountID(_10)]
       end,
        case _9 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_9)]
        end,
        case _8 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_8)]
        end,
        case _7 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_7)]
        end,
        case _6 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_6)]
        end,
        case _5 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_5)]
        end,
        case _4 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_uint32(_4)]
        end,
        case _3 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_string32(_3)]
        end,
        case _2 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_Signer(_2)]
        end]
  end.

dec_SetOptionsOp(_1, _2) ->
  begin
    {_3, _4} =
      begin
        <<_:_2/binary, _5:32/unsigned, _/binary>> = _1,
        _6 = _2 + 4,
        if
          _5 == 0 ->
            {void, _6};
          _5 == 1 ->
            dec_AccountID(_1, _6)
        end
      end,
    {_7, _8} =
      begin
        <<_:_4/binary, _9:32/unsigned, _/binary>> = _1,
        _10 = _4 + 4,
        if
          _9 == 0 ->
            {void, _10};
          _9 == 1 ->
            dec_uint32(_1, _10)
        end
      end,
    {_11, _12} =
      begin
        <<_:_8/binary, _13:32/unsigned, _/binary>> = _1,
        _14 = _8 + 4,
        if
          _13 == 0 ->
            {void, _14};
          _13 == 1 ->
            dec_uint32(_1, _14)
        end
      end,
    {_15, _16} =
      begin
        <<_:_12/binary, _17:32/unsigned, _/binary>> = _1,
        _18 = _12 + 4,
        if
          _17 == 0 ->
            {void, _18};
          _17 == 1 ->
            dec_uint32(_1, _18)
        end
      end,
    {_19, _20} =
      begin
        <<_:_16/binary, _21:32/unsigned, _/binary>> = _1,
        _22 = _16 + 4,
        if
          _21 == 0 ->
            {void, _22};
          _21 == 1 ->
            dec_uint32(_1, _22)
        end
      end,
    {_23, _24} =
      begin
        <<_:_20/binary, _25:32/unsigned, _/binary>> = _1,
        _26 = _20 + 4,
        if
          _25 == 0 ->
            {void, _26};
          _25 == 1 ->
            dec_uint32(_1, _26)
        end
      end,
    {_27, _28} =
      begin
        <<_:_24/binary, _29:32/unsigned, _/binary>> = _1,
        _30 = _24 + 4,
        if
          _29 == 0 ->
            {void, _30};
          _29 == 1 ->
            dec_uint32(_1, _30)
        end
      end,
    {_31, _32} =
      begin
        <<_:_28/binary, _33:32/unsigned, _/binary>> = _1,
        _34 = _28 + 4,
        if
          _33 == 0 ->
            {void, _34};
          _33 == 1 ->
            dec_string32(_1, _34)
        end
      end,
    {_35, _36} =
      begin
        <<_:_32/binary, _37:32/unsigned, _/binary>> = _1,
        _38 = _32 + 4,
        if
          _37 == 0 ->
            {void, _38};
          _37 == 1 ->
            dec_Signer(_1, _38)
        end
      end,
    {{_3, _7, _11, _15, _19, _23, _27, _31, _35}, _36}
  end.

enc_ChangeTrustOp(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_Asset(_3), enc_int64(_2)]
  end.

dec_ChangeTrustOp(_1, _2) ->
  begin
    {_3, _4} = dec_Asset(_1, _2),
    {_5, _6} = dec_int64(_1, _4),
    {{_3, _5}, _6}
  end.

enc_AllowTrustOp(_1) ->
  case _1 of
    {_6, _3, _2} ->
      [enc_AccountID(_6),
        case _3 of
          {_4, _5} ->
            [enc_AssetType(_4),
              case _4 of
                'ASSET_TYPE_CREDIT_ALPHANUM4' ->
                  case io_list_len(_5) of
                    4 ->
                      _5;
                    _ ->
                      exit({xdr, limit})
                  end;
                'ASSET_TYPE_CREDIT_ALPHANUM12' ->
                  case io_list_len(_5) of
                    12 ->
                      _5;
                    _ ->
                      exit({xdr, limit})
                  end
              end]
        end,
        if
          _2 == true ->
            <<1:32>>;
          _2 == false ->
            <<0:32>>
        end]
  end.

dec_AllowTrustOp(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/signed, _/binary>> = _1,
        _10 = _4 + 4,
        case _7 of
          1 ->
            begin
              <<_:_10/binary, _8:4/binary, _/binary>> = _1,
              _9 = _10 + 4
            end,
            {{'ASSET_TYPE_CREDIT_ALPHANUM4', _8}, _9};
          2 ->
            begin
              <<_:_10/binary, _8:12/binary, _/binary>> = _1,
              _9 = _10 + 12
            end,
            {{'ASSET_TYPE_CREDIT_ALPHANUM12', _8}, _9}
        end
      end,
    begin
      begin
        <<_:_6/binary, _13:32/unsigned, _/binary>> = _1,
        _11 =
          if
            _13 == 0 ->
              false;
            _13 == 1 ->
              true
          end
      end,
      _12 = _6 + 4
    end,
    {{_3, _5, _11}, _12}
  end.

enc_ManageDataOp(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_string64(_3),
        case _2 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_DataValue(_2)]
        end]
  end.

dec_ManageDataOp(_1, _2) ->
  begin
    {_3, _4} = dec_string64(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/unsigned, _/binary>> = _1,
        _8 = _4 + 4,
        if
          _7 == 0 ->
            {void, _8};
          _7 == 1 ->
            dec_DataValue(_1, _8)
        end
      end,
    {{_3, _5}, _6}
  end.

enc_Operation(_1) ->
  case _1 of
    {_5, _2} ->
      [case _5 of
         void ->
           <<0:32>>;
         _ ->
           [<<1:32>>, enc_AccountID(_5)]
       end,
        case _2 of
          {_3, _4} ->
            [enc_OperationType(_3),
              case _3 of
                'CREATE_ACCOUNT' ->
                  enc_CreateAccountOp(_4);
                'PAYMENT' ->
                  enc_PaymentOp(_4);
                'PATH_PAYMENT' ->
                  enc_PathPaymentOp(_4);
                'MANAGE_OFFER' ->
                  enc_ManageOfferOp(_4);
                'CREATE_PASSIVE_OFFER' ->
                  enc_CreatePassiveOfferOp(_4);
                'SET_OPTIONS' ->
                  enc_SetOptionsOp(_4);
                'CHANGE_TRUST' ->
                  enc_ChangeTrustOp(_4);
                'ALLOW_TRUST' ->
                  enc_AllowTrustOp(_4);
                'ACCOUNT_MERGE' ->
                  enc_AccountID(_4);
                'INFLATION' ->
                  [];
                'MANAGE_DATA' ->
                  enc_ManageDataOp(_4)
              end]
        end]
  end.

dec_Operation(_1, _2) ->
  begin
    {_3, _4} =
      begin
        <<_:_2/binary, _5:32/unsigned, _/binary>> = _1,
        _6 = _2 + 4,
        if
          _5 == 0 ->
            {void, _6};
          _5 == 1 ->
            dec_AccountID(_1, _6)
        end
      end,
    {_7, _8} =
      begin
        <<_:_4/binary, _9:32/signed, _/binary>> = _1,
        _12 = _4 + 4,
        case _9 of
          0 ->
            {_10, _11} = dec_CreateAccountOp(_1, _12),
            {{'CREATE_ACCOUNT', _10}, _11};
          1 ->
            {_10, _11} = dec_PaymentOp(_1, _12),
            {{'PAYMENT', _10}, _11};
          2 ->
            {_10, _11} = dec_PathPaymentOp(_1, _12),
            {{'PATH_PAYMENT', _10}, _11};
          3 ->
            {_10, _11} = dec_ManageOfferOp(_1, _12),
            {{'MANAGE_OFFER', _10}, _11};
          4 ->
            {_10, _11} = dec_CreatePassiveOfferOp(_1, _12),
            {{'CREATE_PASSIVE_OFFER', _10}, _11};
          5 ->
            {_10, _11} = dec_SetOptionsOp(_1, _12),
            {{'SET_OPTIONS', _10}, _11};
          6 ->
            {_10, _11} = dec_ChangeTrustOp(_1, _12),
            {{'CHANGE_TRUST', _10}, _11};
          7 ->
            {_10, _11} = dec_AllowTrustOp(_1, _12),
            {{'ALLOW_TRUST', _10}, _11};
          8 ->
            {_10, _11} = dec_AccountID(_1, _12),
            {{'ACCOUNT_MERGE', _10}, _11};
          9 ->
            {_10, _11} = {void, _12},
            {{'INFLATION', _10}, _11};
          10 ->
            {_10, _11} = dec_ManageDataOp(_1, _12),
            {{'MANAGE_DATA', _10}, _11}
        end
      end,
    {{_3, _7}, _8}
  end.

enc_MemoType(_1) ->
  case _1 of
    'MEMO_NONE' ->
      <<0:32>>;
    'MEMO_TEXT' ->
      <<1:32>>;
    'MEMO_ID' ->
      <<2:32>>;
    'MEMO_HASH' ->
      <<3:32>>;
    'MEMO_RETURN' ->
      <<4:32>>
  end.

dec_MemoType(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'MEMO_NONE', _2 + 4};
      1 ->
        {'MEMO_TEXT', _2 + 4};
      2 ->
        {'MEMO_ID', _2 + 4};
      3 ->
        {'MEMO_HASH', _2 + 4};
      4 ->
        {'MEMO_RETURN', _2 + 4}
    end
  end.

dec_MemoType_i2a(_4) ->
  case _4 of
    0 ->
      'MEMO_NONE';
    1 ->
      'MEMO_TEXT';
    2 ->
      'MEMO_ID';
    3 ->
      'MEMO_HASH';
    4 ->
      'MEMO_RETURN'
  end.

enc_Memo(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_MemoType(_2),
        case _2 of
          'MEMO_NONE' ->
            [];
          'MEMO_TEXT' ->
            begin
              _4 = io_list_len(_3),
              if
                _4 =< 28 ->
                  [<<_4:32/unsigned>>, _3, enc_align(_4)];
                true ->
                  exit({xdr, limit})
              end
            end;
          'MEMO_ID' ->
            enc_uint64(_3);
          'MEMO_HASH' ->
            enc_Hash(_3);
          'MEMO_RETURN' ->
            enc_Hash(_3)
        end]
  end.

dec_Memo(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'MEMO_NONE', _4}, _5};
      1 ->
        {_4, _5} =
          begin
            <<_:_6/binary, _7:32/unsigned, _/binary>> = _1,
            if
              _7 > 28 ->
                exit({xdr, limit});
              true ->
                _8 = _6 + 4,
                <<_:_8/binary, _9:_7/binary, _/binary>> =
                  _1,
                {_9, _8 + align(_7)}
            end
          end,
        {{'MEMO_TEXT', _4}, _5};
      2 ->
        {_4, _5} = dec_uint64(_1, _6),
        {{'MEMO_ID', _4}, _5};
      3 ->
        {_4, _5} = dec_Hash(_1, _6),
        {{'MEMO_HASH', _4}, _5};
      4 ->
        {_4, _5} = dec_Hash(_1, _6),
        {{'MEMO_RETURN', _4}, _5}
    end
  end.

enc_TimeBounds(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_uint64(_3), enc_uint64(_2)]
  end.

dec_TimeBounds(_1, _2) ->
  begin
    {_3, _4} = dec_uint64(_1, _2),
    {_5, _6} = dec_uint64(_1, _4),
    {{_3, _5}, _6}
  end.

enc_Transaction(_1) ->
  case _1 of
    {_12, _11, _10, _9, _8, _5, _2} ->
      [enc_AccountID(_12),
        enc_uint32(_11),
        enc_SequenceNumber(_10),
        case _9 of
          void ->
            <<0:32>>;
          _ ->
            [<<1:32>>, enc_TimeBounds(_9)]
        end,
        enc_Memo(_8),
        begin
          _7 = length(_5),
          if
            _7 =< 100 ->
              [<<_7:32/unsigned>>,
                lists:map(fun(_6) ->
                  enc_Operation(_6)
                          end,
                  _5)];
            true ->
              exit({xdr, limit})
          end
        end,
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_Transaction(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_uint32(_1, _4),
    {_7, _8} = dec_SequenceNumber(_1, _6),
    {_9, _10} =
      begin
        <<_:_8/binary, _11:32/unsigned, _/binary>> = _1,
        _12 = _8 + 4,
        if
          _11 == 0 ->
            {void, _12};
          _11 == 1 ->
            dec_TimeBounds(_1, _12)
        end
      end,
    {_13, _14} = dec_Memo(_1, _10),
    {_15, _16} =
      begin
        <<_:_14/binary, _17:32/unsigned, _/binary>> = _1,
        map_elem(fun(_18, _19) ->
          dec_Operation(_18, _19)
                 end,
          _1,
          _14 + 4,
          100,
          _17)
      end,
    {_20, _21} =
      begin
        <<_:_16/binary, _22:32/signed, _/binary>> = _1,
        _25 = _16 + 4,
        case _22 of
          0 ->
            {_23, _24} = {void, _25},
            {{0, _23}, _24}
        end
      end,
    {{_3, _5, _7, _9, _13, _15, _20}, _21}
  end.

enc_TransactionSignaturePayload(_1) ->
  case _1 of
    {_5, _2} ->
      [enc_Hash(_5),
        case _2 of
          {_3, _4} ->
            [enc_EnvelopeType(_3),
              case _3 of
                'ENVELOPE_TYPE_TX' ->
                  enc_Transaction(_4)
              end]
        end]
  end.

dec_TransactionSignaturePayload(_1, _2) ->
  begin
    {_3, _4} = dec_Hash(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/signed, _/binary>> = _1,
        _10 = _4 + 4,
        case _7 of
          2 ->
            {_8, _9} = dec_Transaction(_1, _10),
            {{'ENVELOPE_TYPE_TX', _8}, _9}
        end
      end,
    {{_3, _5}, _6}
  end.

enc_TransactionEnvelope(_1) ->
  case _1 of
    {_5, _2} ->
      [enc_Transaction(_5),
        begin
          _4 = length(_2),
          if
            _4 =< 20 ->
              [<<_4:32/unsigned>>,
                lists:map(fun(_3) ->
                  enc_DecoratedSignature(_3)
                          end,
                  _2)];
            true ->
              exit({xdr, limit})
          end
        end]
  end.

dec_TransactionEnvelope(_1, _2) ->
  begin
    {_3, _4} = dec_Transaction(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/unsigned, _/binary>> = _1,
        map_elem(fun(_8, _9) ->
          dec_DecoratedSignature(_8, _9)
                 end,
          _1,
          _4 + 4,
          20,
          _7)
      end,
    {{_3, _5}, _6}
  end.

enc_ClaimOfferAtom(_1) ->
  case _1 of
    {_7, _6, _5, _4, _3, _2} ->
      [enc_AccountID(_7),
        enc_uint64(_6),
        enc_Asset(_5),
        enc_int64(_4),
        enc_Asset(_3),
        enc_int64(_2)]
  end.

dec_ClaimOfferAtom(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_uint64(_1, _4),
    {_7, _8} = dec_Asset(_1, _6),
    {_9, _10} = dec_int64(_1, _8),
    {_11, _12} = dec_Asset(_1, _10),
    {_13, _14} = dec_int64(_1, _12),
    {{_3, _5, _7, _9, _11, _13}, _14}
  end.

enc_CreateAccountResultCode(_1) ->
  case _1 of
    'CREATE_ACCOUNT_SUCCESS' ->
      <<0:32>>;
    'CREATE_ACCOUNT_MALFORMED' ->
      <<-1:32>>;
    'CREATE_ACCOUNT_UNDERFUNDED' ->
      <<-2:32>>;
    'CREATE_ACCOUNT_LOW_RESERVE' ->
      <<-3:32>>;
    'CREATE_ACCOUNT_ALREADY_EXIST' ->
      <<-4:32>>
  end.

dec_CreateAccountResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'CREATE_ACCOUNT_SUCCESS', _2 + 4};
      -1 ->
        {'CREATE_ACCOUNT_MALFORMED', _2 + 4};
      -2 ->
        {'CREATE_ACCOUNT_UNDERFUNDED', _2 + 4};
      -3 ->
        {'CREATE_ACCOUNT_LOW_RESERVE', _2 + 4};
      -4 ->
        {'CREATE_ACCOUNT_ALREADY_EXIST', _2 + 4}
    end
  end.

dec_CreateAccountResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'CREATE_ACCOUNT_SUCCESS';
    -1 ->
      'CREATE_ACCOUNT_MALFORMED';
    -2 ->
      'CREATE_ACCOUNT_UNDERFUNDED';
    -3 ->
      'CREATE_ACCOUNT_LOW_RESERVE';
    -4 ->
      'CREATE_ACCOUNT_ALREADY_EXIST'
  end.

enc_CreateAccountResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_CreateAccountResultCode(_2),
        case _2 of
          'CREATE_ACCOUNT_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_CreateAccountResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'CREATE_ACCOUNT_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_CreateAccountResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_PaymentResultCode(_1) ->
  case _1 of
    'PAYMENT_SUCCESS' ->
      <<0:32>>;
    'PAYMENT_MALFORMED' ->
      <<-1:32>>;
    'PAYMENT_UNDERFUNDED' ->
      <<-2:32>>;
    'PAYMENT_SRC_NO_TRUST' ->
      <<-3:32>>;
    'PAYMENT_SRC_NOT_AUTHORIZED' ->
      <<-4:32>>;
    'PAYMENT_NO_DESTINATION' ->
      <<-5:32>>;
    'PAYMENT_NO_TRUST' ->
      <<-6:32>>;
    'PAYMENT_NOT_AUTHORIZED' ->
      <<-7:32>>;
    'PAYMENT_LINE_FULL' ->
      <<-8:32>>;
    'PAYMENT_NO_ISSUER' ->
      <<-9:32>>
  end.

dec_PaymentResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'PAYMENT_SUCCESS', _2 + 4};
      -1 ->
        {'PAYMENT_MALFORMED', _2 + 4};
      -2 ->
        {'PAYMENT_UNDERFUNDED', _2 + 4};
      -3 ->
        {'PAYMENT_SRC_NO_TRUST', _2 + 4};
      -4 ->
        {'PAYMENT_SRC_NOT_AUTHORIZED', _2 + 4};
      -5 ->
        {'PAYMENT_NO_DESTINATION', _2 + 4};
      -6 ->
        {'PAYMENT_NO_TRUST', _2 + 4};
      -7 ->
        {'PAYMENT_NOT_AUTHORIZED', _2 + 4};
      -8 ->
        {'PAYMENT_LINE_FULL', _2 + 4};
      -9 ->
        {'PAYMENT_NO_ISSUER', _2 + 4}
    end
  end.

dec_PaymentResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'PAYMENT_SUCCESS';
    -1 ->
      'PAYMENT_MALFORMED';
    -2 ->
      'PAYMENT_UNDERFUNDED';
    -3 ->
      'PAYMENT_SRC_NO_TRUST';
    -4 ->
      'PAYMENT_SRC_NOT_AUTHORIZED';
    -5 ->
      'PAYMENT_NO_DESTINATION';
    -6 ->
      'PAYMENT_NO_TRUST';
    -7 ->
      'PAYMENT_NOT_AUTHORIZED';
    -8 ->
      'PAYMENT_LINE_FULL';
    -9 ->
      'PAYMENT_NO_ISSUER'
  end.

enc_PaymentResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_PaymentResultCode(_2),
        case _2 of
          'PAYMENT_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_PaymentResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'PAYMENT_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_PaymentResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_PathPaymentResultCode(_1) ->
  case _1 of
    'PATH_PAYMENT_SUCCESS' ->
      <<0:32>>;
    'PATH_PAYMENT_MALFORMED' ->
      <<-1:32>>;
    'PATH_PAYMENT_UNDERFUNDED' ->
      <<-2:32>>;
    'PATH_PAYMENT_SRC_NO_TRUST' ->
      <<-3:32>>;
    'PATH_PAYMENT_SRC_NOT_AUTHORIZED' ->
      <<-4:32>>;
    'PATH_PAYMENT_NO_DESTINATION' ->
      <<-5:32>>;
    'PATH_PAYMENT_NO_TRUST' ->
      <<-6:32>>;
    'PATH_PAYMENT_NOT_AUTHORIZED' ->
      <<-7:32>>;
    'PATH_PAYMENT_LINE_FULL' ->
      <<-8:32>>;
    'PATH_PAYMENT_NO_ISSUER' ->
      <<-9:32>>;
    'PATH_PAYMENT_TOO_FEW_OFFERS' ->
      <<-10:32>>;
    'PATH_PAYMENT_OFFER_CROSS_SELF' ->
      <<-11:32>>;
    'PATH_PAYMENT_OVER_SENDMAX' ->
      <<-12:32>>
  end.

dec_PathPaymentResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'PATH_PAYMENT_SUCCESS', _2 + 4};
      -1 ->
        {'PATH_PAYMENT_MALFORMED', _2 + 4};
      -2 ->
        {'PATH_PAYMENT_UNDERFUNDED', _2 + 4};
      -3 ->
        {'PATH_PAYMENT_SRC_NO_TRUST', _2 + 4};
      -4 ->
        {'PATH_PAYMENT_SRC_NOT_AUTHORIZED', _2 + 4};
      -5 ->
        {'PATH_PAYMENT_NO_DESTINATION', _2 + 4};
      -6 ->
        {'PATH_PAYMENT_NO_TRUST', _2 + 4};
      -7 ->
        {'PATH_PAYMENT_NOT_AUTHORIZED', _2 + 4};
      -8 ->
        {'PATH_PAYMENT_LINE_FULL', _2 + 4};
      -9 ->
        {'PATH_PAYMENT_NO_ISSUER', _2 + 4};
      -10 ->
        {'PATH_PAYMENT_TOO_FEW_OFFERS', _2 + 4};
      -11 ->
        {'PATH_PAYMENT_OFFER_CROSS_SELF', _2 + 4};
      -12 ->
        {'PATH_PAYMENT_OVER_SENDMAX', _2 + 4}
    end
  end.

dec_PathPaymentResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'PATH_PAYMENT_SUCCESS';
    -1 ->
      'PATH_PAYMENT_MALFORMED';
    -2 ->
      'PATH_PAYMENT_UNDERFUNDED';
    -3 ->
      'PATH_PAYMENT_SRC_NO_TRUST';
    -4 ->
      'PATH_PAYMENT_SRC_NOT_AUTHORIZED';
    -5 ->
      'PATH_PAYMENT_NO_DESTINATION';
    -6 ->
      'PATH_PAYMENT_NO_TRUST';
    -7 ->
      'PATH_PAYMENT_NOT_AUTHORIZED';
    -8 ->
      'PATH_PAYMENT_LINE_FULL';
    -9 ->
      'PATH_PAYMENT_NO_ISSUER';
    -10 ->
      'PATH_PAYMENT_TOO_FEW_OFFERS';
    -11 ->
      'PATH_PAYMENT_OFFER_CROSS_SELF';
    -12 ->
      'PATH_PAYMENT_OVER_SENDMAX'
  end.

enc_SimplePaymentResult(_1) ->
  case _1 of
    {_4, _3, _2} ->
      [enc_AccountID(_4), enc_Asset(_3), enc_int64(_2)]
  end.

dec_SimplePaymentResult(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_Asset(_1, _4),
    {_7, _8} = dec_int64(_1, _6),
    {{_3, _5, _7}, _8}
  end.

enc_PathPaymentResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_PathPaymentResultCode(_2),
        case _2 of
          'PATH_PAYMENT_SUCCESS' ->
            case _3 of
              {_5, _4} ->
                [begin
                   _7 = length(_5),
                   [<<_7:32/unsigned>>,
                     lists:map(fun(_6) ->
                       enc_ClaimOfferAtom(_6)
                               end,
                       _5)]
                 end,
                  enc_SimplePaymentResult(_4)]
            end;
          'PATH_PAYMENT_NO_ISSUER' ->
            enc_Asset(_3);
          _ ->
            []
        end]
  end.

dec_PathPaymentResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} =
          begin
            {_8, _9} =
              begin
                <<_:_6/binary, _10:32/unsigned, _/binary>> =
                  _1,
                map_elem(fun(_11, _12) ->
                  dec_ClaimOfferAtom(_11,
                    _12)
                         end,
                  _1,
                  _6 + 4,
                  infinity,
                  _10)
              end,
            {_13, _14} = dec_SimplePaymentResult(_1, _9),
            {{_8, _13}, _14}
          end,
        {{'PATH_PAYMENT_SUCCESS', _4}, _5};
      -9 ->
        {_4, _5} = dec_Asset(_1, _6),
        {{'PATH_PAYMENT_NO_ISSUER', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_PathPaymentResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_ManageOfferResultCode(_1) ->
  case _1 of
    'MANAGE_OFFER_SUCCESS' ->
      <<0:32>>;
    'MANAGE_OFFER_MALFORMED' ->
      <<-1:32>>;
    'MANAGE_OFFER_SELL_NO_TRUST' ->
      <<-2:32>>;
    'MANAGE_OFFER_BUY_NO_TRUST' ->
      <<-3:32>>;
    'MANAGE_OFFER_SELL_NOT_AUTHORIZED' ->
      <<-4:32>>;
    'MANAGE_OFFER_BUY_NOT_AUTHORIZED' ->
      <<-5:32>>;
    'MANAGE_OFFER_LINE_FULL' ->
      <<-6:32>>;
    'MANAGE_OFFER_UNDERFUNDED' ->
      <<-7:32>>;
    'MANAGE_OFFER_CROSS_SELF' ->
      <<-8:32>>;
    'MANAGE_OFFER_SELL_NO_ISSUER' ->
      <<-9:32>>;
    'MANAGE_OFFER_BUY_NO_ISSUER' ->
      <<-10:32>>;
    'MANAGE_OFFER_NOT_FOUND' ->
      <<-11:32>>;
    'MANAGE_OFFER_LOW_RESERVE' ->
      <<-12:32>>
  end.

dec_ManageOfferResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'MANAGE_OFFER_SUCCESS', _2 + 4};
      -1 ->
        {'MANAGE_OFFER_MALFORMED', _2 + 4};
      -2 ->
        {'MANAGE_OFFER_SELL_NO_TRUST', _2 + 4};
      -3 ->
        {'MANAGE_OFFER_BUY_NO_TRUST', _2 + 4};
      -4 ->
        {'MANAGE_OFFER_SELL_NOT_AUTHORIZED', _2 + 4};
      -5 ->
        {'MANAGE_OFFER_BUY_NOT_AUTHORIZED', _2 + 4};
      -6 ->
        {'MANAGE_OFFER_LINE_FULL', _2 + 4};
      -7 ->
        {'MANAGE_OFFER_UNDERFUNDED', _2 + 4};
      -8 ->
        {'MANAGE_OFFER_CROSS_SELF', _2 + 4};
      -9 ->
        {'MANAGE_OFFER_SELL_NO_ISSUER', _2 + 4};
      -10 ->
        {'MANAGE_OFFER_BUY_NO_ISSUER', _2 + 4};
      -11 ->
        {'MANAGE_OFFER_NOT_FOUND', _2 + 4};
      -12 ->
        {'MANAGE_OFFER_LOW_RESERVE', _2 + 4}
    end
  end.

dec_ManageOfferResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'MANAGE_OFFER_SUCCESS';
    -1 ->
      'MANAGE_OFFER_MALFORMED';
    -2 ->
      'MANAGE_OFFER_SELL_NO_TRUST';
    -3 ->
      'MANAGE_OFFER_BUY_NO_TRUST';
    -4 ->
      'MANAGE_OFFER_SELL_NOT_AUTHORIZED';
    -5 ->
      'MANAGE_OFFER_BUY_NOT_AUTHORIZED';
    -6 ->
      'MANAGE_OFFER_LINE_FULL';
    -7 ->
      'MANAGE_OFFER_UNDERFUNDED';
    -8 ->
      'MANAGE_OFFER_CROSS_SELF';
    -9 ->
      'MANAGE_OFFER_SELL_NO_ISSUER';
    -10 ->
      'MANAGE_OFFER_BUY_NO_ISSUER';
    -11 ->
      'MANAGE_OFFER_NOT_FOUND';
    -12 ->
      'MANAGE_OFFER_LOW_RESERVE'
  end.

enc_ManageOfferEffect(_1) ->
  case _1 of
    'MANAGE_OFFER_CREATED' ->
      <<0:32>>;
    'MANAGE_OFFER_UPDATED' ->
      <<1:32>>;
    'MANAGE_OFFER_DELETED' ->
      <<2:32>>
  end.

dec_ManageOfferEffect(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'MANAGE_OFFER_CREATED', _2 + 4};
      1 ->
        {'MANAGE_OFFER_UPDATED', _2 + 4};
      2 ->
        {'MANAGE_OFFER_DELETED', _2 + 4}
    end
  end.

dec_ManageOfferEffect_i2a(_4) ->
  case _4 of
    0 ->
      'MANAGE_OFFER_CREATED';
    1 ->
      'MANAGE_OFFER_UPDATED';
    2 ->
      'MANAGE_OFFER_DELETED'
  end.

enc_ManageOfferSuccessResult(_1) ->
  case _1 of
    {_5, _2} ->
      [begin
         _7 = length(_5),
         [<<_7:32/unsigned>>,
           lists:map(fun(_6) ->
             enc_ClaimOfferAtom(_6)
                     end,
             _5)]
       end,
        case _2 of
          {_3, _4} ->
            [enc_ManageOfferEffect(_3),
              case _3 of
                'MANAGE_OFFER_CREATED' ->
                  enc_OfferEntry(_4);
                'MANAGE_OFFER_UPDATED' ->
                  enc_OfferEntry(_4);
                _ ->
                  []
              end]
        end]
  end.

dec_ManageOfferSuccessResult(_1, _2) ->
  begin
    {_3, _4} =
      begin
        <<_:_2/binary, _5:32/unsigned, _/binary>> = _1,
        map_elem(fun(_6, _7) ->
          dec_ClaimOfferAtom(_6, _7)
                 end,
          _1,
          _2 + 4,
          infinity,
          _5)
      end,
    {_8, _9} =
      begin
        <<_:_4/binary, _10:32/signed, _/binary>> = _1,
        _13 = _4 + 4,
        case _10 of
          0 ->
            {_11, _12} = dec_OfferEntry(_1, _13),
            {{'MANAGE_OFFER_CREATED', _11}, _12};
          1 ->
            {_11, _12} = dec_OfferEntry(_1, _13),
            {{'MANAGE_OFFER_UPDATED', _11}, _12};
          _ ->
            {_11, _12} = {void, _13},
            _14 = dec_ManageOfferEffect_i2a(_10),
            {{_14, _11}, _12}
        end
      end,
    {{_3, _8}, _9}
  end.

enc_ManageOfferResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_ManageOfferResultCode(_2),
        case _2 of
          'MANAGE_OFFER_SUCCESS' ->
            enc_ManageOfferSuccessResult(_3);
          _ ->
            []
        end]
  end.

dec_ManageOfferResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = dec_ManageOfferSuccessResult(_1, _6),
        {{'MANAGE_OFFER_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_ManageOfferResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_SetOptionsResultCode(_1) ->
  case _1 of
    'SET_OPTIONS_SUCCESS' ->
      <<0:32>>;
    'SET_OPTIONS_LOW_RESERVE' ->
      <<-1:32>>;
    'SET_OPTIONS_TOO_MANY_SIGNERS' ->
      <<-2:32>>;
    'SET_OPTIONS_BAD_FLAGS' ->
      <<-3:32>>;
    'SET_OPTIONS_INVALID_INFLATION' ->
      <<-4:32>>;
    'SET_OPTIONS_CANT_CHANGE' ->
      <<-5:32>>;
    'SET_OPTIONS_UNKNOWN_FLAG' ->
      <<-6:32>>;
    'SET_OPTIONS_THRESHOLD_OUT_OF_RANGE' ->
      <<-7:32>>;
    'SET_OPTIONS_BAD_SIGNER' ->
      <<-8:32>>;
    'SET_OPTIONS_INVALID_HOME_DOMAIN' ->
      <<-9:32>>
  end.

dec_SetOptionsResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'SET_OPTIONS_SUCCESS', _2 + 4};
      -1 ->
        {'SET_OPTIONS_LOW_RESERVE', _2 + 4};
      -2 ->
        {'SET_OPTIONS_TOO_MANY_SIGNERS', _2 + 4};
      -3 ->
        {'SET_OPTIONS_BAD_FLAGS', _2 + 4};
      -4 ->
        {'SET_OPTIONS_INVALID_INFLATION', _2 + 4};
      -5 ->
        {'SET_OPTIONS_CANT_CHANGE', _2 + 4};
      -6 ->
        {'SET_OPTIONS_UNKNOWN_FLAG', _2 + 4};
      -7 ->
        {'SET_OPTIONS_THRESHOLD_OUT_OF_RANGE', _2 + 4};
      -8 ->
        {'SET_OPTIONS_BAD_SIGNER', _2 + 4};
      -9 ->
        {'SET_OPTIONS_INVALID_HOME_DOMAIN', _2 + 4}
    end
  end.

dec_SetOptionsResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'SET_OPTIONS_SUCCESS';
    -1 ->
      'SET_OPTIONS_LOW_RESERVE';
    -2 ->
      'SET_OPTIONS_TOO_MANY_SIGNERS';
    -3 ->
      'SET_OPTIONS_BAD_FLAGS';
    -4 ->
      'SET_OPTIONS_INVALID_INFLATION';
    -5 ->
      'SET_OPTIONS_CANT_CHANGE';
    -6 ->
      'SET_OPTIONS_UNKNOWN_FLAG';
    -7 ->
      'SET_OPTIONS_THRESHOLD_OUT_OF_RANGE';
    -8 ->
      'SET_OPTIONS_BAD_SIGNER';
    -9 ->
      'SET_OPTIONS_INVALID_HOME_DOMAIN'
  end.

enc_SetOptionsResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_SetOptionsResultCode(_2),
        case _2 of
          'SET_OPTIONS_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_SetOptionsResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'SET_OPTIONS_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_SetOptionsResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_ChangeTrustResultCode(_1) ->
  case _1 of
    'CHANGE_TRUST_SUCCESS' ->
      <<0:32>>;
    'CHANGE_TRUST_MALFORMED' ->
      <<-1:32>>;
    'CHANGE_TRUST_NO_ISSUER' ->
      <<-2:32>>;
    'CHANGE_TRUST_INVALID_LIMIT' ->
      <<-3:32>>;
    'CHANGE_TRUST_LOW_RESERVE' ->
      <<-4:32>>;
    'CHANGE_TRUST_SELF_NOT_ALLOWED' ->
      <<-5:32>>
  end.

dec_ChangeTrustResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'CHANGE_TRUST_SUCCESS', _2 + 4};
      -1 ->
        {'CHANGE_TRUST_MALFORMED', _2 + 4};
      -2 ->
        {'CHANGE_TRUST_NO_ISSUER', _2 + 4};
      -3 ->
        {'CHANGE_TRUST_INVALID_LIMIT', _2 + 4};
      -4 ->
        {'CHANGE_TRUST_LOW_RESERVE', _2 + 4};
      -5 ->
        {'CHANGE_TRUST_SELF_NOT_ALLOWED', _2 + 4}
    end
  end.

dec_ChangeTrustResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'CHANGE_TRUST_SUCCESS';
    -1 ->
      'CHANGE_TRUST_MALFORMED';
    -2 ->
      'CHANGE_TRUST_NO_ISSUER';
    -3 ->
      'CHANGE_TRUST_INVALID_LIMIT';
    -4 ->
      'CHANGE_TRUST_LOW_RESERVE';
    -5 ->
      'CHANGE_TRUST_SELF_NOT_ALLOWED'
  end.

enc_ChangeTrustResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_ChangeTrustResultCode(_2),
        case _2 of
          'CHANGE_TRUST_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_ChangeTrustResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'CHANGE_TRUST_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_ChangeTrustResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_AllowTrustResultCode(_1) ->
  case _1 of
    'ALLOW_TRUST_SUCCESS' ->
      <<0:32>>;
    'ALLOW_TRUST_MALFORMED' ->
      <<-1:32>>;
    'ALLOW_TRUST_NO_TRUST_LINE' ->
      <<-2:32>>;
    'ALLOW_TRUST_TRUST_NOT_REQUIRED' ->
      <<-3:32>>;
    'ALLOW_TRUST_CANT_REVOKE' ->
      <<-4:32>>;
    'ALLOW_TRUST_SELF_NOT_ALLOWED' ->
      <<-5:32>>
  end.

dec_AllowTrustResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'ALLOW_TRUST_SUCCESS', _2 + 4};
      -1 ->
        {'ALLOW_TRUST_MALFORMED', _2 + 4};
      -2 ->
        {'ALLOW_TRUST_NO_TRUST_LINE', _2 + 4};
      -3 ->
        {'ALLOW_TRUST_TRUST_NOT_REQUIRED', _2 + 4};
      -4 ->
        {'ALLOW_TRUST_CANT_REVOKE', _2 + 4};
      -5 ->
        {'ALLOW_TRUST_SELF_NOT_ALLOWED', _2 + 4}
    end
  end.

dec_AllowTrustResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'ALLOW_TRUST_SUCCESS';
    -1 ->
      'ALLOW_TRUST_MALFORMED';
    -2 ->
      'ALLOW_TRUST_NO_TRUST_LINE';
    -3 ->
      'ALLOW_TRUST_TRUST_NOT_REQUIRED';
    -4 ->
      'ALLOW_TRUST_CANT_REVOKE';
    -5 ->
      'ALLOW_TRUST_SELF_NOT_ALLOWED'
  end.

enc_AllowTrustResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_AllowTrustResultCode(_2),
        case _2 of
          'ALLOW_TRUST_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_AllowTrustResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'ALLOW_TRUST_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_AllowTrustResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_AccountMergeResultCode(_1) ->
  case _1 of
    'ACCOUNT_MERGE_SUCCESS' ->
      <<0:32>>;
    'ACCOUNT_MERGE_MALFORMED' ->
      <<-1:32>>;
    'ACCOUNT_MERGE_NO_ACCOUNT' ->
      <<-2:32>>;
    'ACCOUNT_MERGE_IMMUTABLE_SET' ->
      <<-3:32>>;
    'ACCOUNT_MERGE_HAS_SUB_ENTRIES' ->
      <<-4:32>>
  end.

dec_AccountMergeResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'ACCOUNT_MERGE_SUCCESS', _2 + 4};
      -1 ->
        {'ACCOUNT_MERGE_MALFORMED', _2 + 4};
      -2 ->
        {'ACCOUNT_MERGE_NO_ACCOUNT', _2 + 4};
      -3 ->
        {'ACCOUNT_MERGE_IMMUTABLE_SET', _2 + 4};
      -4 ->
        {'ACCOUNT_MERGE_HAS_SUB_ENTRIES', _2 + 4}
    end
  end.

dec_AccountMergeResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'ACCOUNT_MERGE_SUCCESS';
    -1 ->
      'ACCOUNT_MERGE_MALFORMED';
    -2 ->
      'ACCOUNT_MERGE_NO_ACCOUNT';
    -3 ->
      'ACCOUNT_MERGE_IMMUTABLE_SET';
    -4 ->
      'ACCOUNT_MERGE_HAS_SUB_ENTRIES'
  end.

enc_AccountMergeResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_AccountMergeResultCode(_2),
        case _2 of
          'ACCOUNT_MERGE_SUCCESS' ->
            enc_int64(_3);
          _ ->
            []
        end]
  end.

dec_AccountMergeResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = dec_int64(_1, _6),
        {{'ACCOUNT_MERGE_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_AccountMergeResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_InflationResultCode(_1) ->
  case _1 of
    'INFLATION_SUCCESS' ->
      <<0:32>>;
    'INFLATION_NOT_TIME' ->
      <<-1:32>>
  end.

dec_InflationResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'INFLATION_SUCCESS', _2 + 4};
      -1 ->
        {'INFLATION_NOT_TIME', _2 + 4}
    end
  end.

dec_InflationResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'INFLATION_SUCCESS';
    -1 ->
      'INFLATION_NOT_TIME'
  end.

enc_InflationPayout(_1) ->
  case _1 of
    {_3, _2} ->
      [enc_AccountID(_3), enc_int64(_2)]
  end.

dec_InflationPayout(_1, _2) ->
  begin
    {_3, _4} = dec_AccountID(_1, _2),
    {_5, _6} = dec_int64(_1, _4),
    {{_3, _5}, _6}
  end.

enc_InflationResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_InflationResultCode(_2),
        case _2 of
          'INFLATION_SUCCESS' ->
            begin
              _5 = length(_3),
              [<<_5:32/unsigned>>,
                lists:map(fun(_4) ->
                  enc_InflationPayout(_4)
                          end,
                  _3)]
            end;
          _ ->
            []
        end]
  end.

dec_InflationResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} =
          begin
            <<_:_6/binary, _8:32/unsigned, _/binary>> = _1,
            map_elem(fun(_9, _10) ->
              dec_InflationPayout(_9, _10)
                     end,
              _1,
              _6 + 4,
              infinity,
              _8)
          end,
        {{'INFLATION_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_InflationResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_ManageDataResultCode(_1) ->
  case _1 of
    'MANAGE_DATA_SUCCESS' ->
      <<0:32>>;
    'MANAGE_DATA_NOT_SUPPORTED_YET' ->
      <<-1:32>>;
    'MANAGE_DATA_NAME_NOT_FOUND' ->
      <<-2:32>>;
    'MANAGE_DATA_LOW_RESERVE' ->
      <<-3:32>>;
    'MANAGE_DATA_INVALID_NAME' ->
      <<-4:32>>
  end.

dec_ManageDataResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {'MANAGE_DATA_SUCCESS', _2 + 4};
      -1 ->
        {'MANAGE_DATA_NOT_SUPPORTED_YET', _2 + 4};
      -2 ->
        {'MANAGE_DATA_NAME_NOT_FOUND', _2 + 4};
      -3 ->
        {'MANAGE_DATA_LOW_RESERVE', _2 + 4};
      -4 ->
        {'MANAGE_DATA_INVALID_NAME', _2 + 4}
    end
  end.

dec_ManageDataResultCode_i2a(_4) ->
  case _4 of
    0 ->
      'MANAGE_DATA_SUCCESS';
    -1 ->
      'MANAGE_DATA_NOT_SUPPORTED_YET';
    -2 ->
      'MANAGE_DATA_NAME_NOT_FOUND';
    -3 ->
      'MANAGE_DATA_LOW_RESERVE';
    -4 ->
      'MANAGE_DATA_INVALID_NAME'
  end.

enc_ManageDataResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_ManageDataResultCode(_2),
        case _2 of
          'MANAGE_DATA_SUCCESS' ->
            [];
          _ ->
            []
        end]
  end.

dec_ManageDataResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} = {void, _6},
        {{'MANAGE_DATA_SUCCESS', _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_ManageDataResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_OperationResultCode(_1) ->
  case _1 of
    opINNER ->
      <<0:32>>;
    opBAD_AUTH ->
      <<-1:32>>;
    opNO_ACCOUNT ->
      <<-2:32>>
  end.

dec_OperationResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {opINNER, _2 + 4};
      -1 ->
        {opBAD_AUTH, _2 + 4};
      -2 ->
        {opNO_ACCOUNT, _2 + 4}
    end
  end.

dec_OperationResultCode_i2a(_4) ->
  case _4 of
    0 ->
      opINNER;
    -1 ->
      opBAD_AUTH;
    -2 ->
      opNO_ACCOUNT
  end.

enc_OperationResult(_1) ->
  case _1 of
    {_2, _3} ->
      [enc_OperationResultCode(_2),
        case _2 of
          opINNER ->
            case _3 of
              {_4, _5} ->
                [enc_OperationType(_4),
                  case _4 of
                    'CREATE_ACCOUNT' ->
                      enc_CreateAccountResult(_5);
                    'PAYMENT' ->
                      enc_PaymentResult(_5);
                    'PATH_PAYMENT' ->
                      enc_PathPaymentResult(_5);
                    'MANAGE_OFFER' ->
                      enc_ManageOfferResult(_5);
                    'CREATE_PASSIVE_OFFER' ->
                      enc_ManageOfferResult(_5);
                    'SET_OPTIONS' ->
                      enc_SetOptionsResult(_5);
                    'CHANGE_TRUST' ->
                      enc_ChangeTrustResult(_5);
                    'ALLOW_TRUST' ->
                      enc_AllowTrustResult(_5);
                    'ACCOUNT_MERGE' ->
                      enc_AccountMergeResult(_5);
                    'INFLATION' ->
                      enc_InflationResult(_5);
                    'MANAGE_DATA' ->
                      enc_ManageDataResult(_5)
                  end]
            end;
          _ ->
            []
        end]
  end.

dec_OperationResult(_1, _2) ->
  begin
    <<_:_2/binary, _3:32/signed, _/binary>> = _1,
    _6 = _2 + 4,
    case _3 of
      0 ->
        {_4, _5} =
          begin
            <<_:_6/binary, _8:32/signed, _/binary>> = _1,
            _11 = _6 + 4,
            case _8 of
              0 ->
                {_9, _10} =
                  dec_CreateAccountResult(_1, _11),
                {{'CREATE_ACCOUNT', _9}, _10};
              1 ->
                {_9, _10} = dec_PaymentResult(_1, _11),
                {{'PAYMENT', _9}, _10};
              2 ->
                {_9, _10} =
                  dec_PathPaymentResult(_1, _11),
                {{'PATH_PAYMENT', _9}, _10};
              3 ->
                {_9, _10} =
                  dec_ManageOfferResult(_1, _11),
                {{'MANAGE_OFFER', _9}, _10};
              4 ->
                {_9, _10} =
                  dec_ManageOfferResult(_1, _11),
                {{'CREATE_PASSIVE_OFFER', _9}, _10};
              5 ->
                {_9, _10} = dec_SetOptionsResult(_1, _11),
                {{'SET_OPTIONS', _9}, _10};
              6 ->
                {_9, _10} =
                  dec_ChangeTrustResult(_1, _11),
                {{'CHANGE_TRUST', _9}, _10};
              7 ->
                {_9, _10} = dec_AllowTrustResult(_1, _11),
                {{'ALLOW_TRUST', _9}, _10};
              8 ->
                {_9, _10} =
                  dec_AccountMergeResult(_1, _11),
                {{'ACCOUNT_MERGE', _9}, _10};
              9 ->
                {_9, _10} = dec_InflationResult(_1, _11),
                {{'INFLATION', _9}, _10};
              10 ->
                {_9, _10} = dec_ManageDataResult(_1, _11),
                {{'MANAGE_DATA', _9}, _10}
            end
          end,
        {{opINNER, _4}, _5};
      _ ->
        {_4, _5} = {void, _6},
        _7 = dec_OperationResultCode_i2a(_3),
        {{_7, _4}, _5}
    end
  end.

enc_TransactionResultCode(_1) ->
  case _1 of
    txSUCCESS ->
      <<0:32>>;
    txFAILED ->
      <<-1:32>>;
    txTOO_EARLY ->
      <<-2:32>>;
    txTOO_LATE ->
      <<-3:32>>;
    txMISSING_OPERATION ->
      <<-4:32>>;
    txBAD_SEQ ->
      <<-5:32>>;
    txBAD_AUTH ->
      <<-6:32>>;
    txINSUFFICIENT_BALANCE ->
      <<-7:32>>;
    txNO_ACCOUNT ->
      <<-8:32>>;
    txINSUFFICIENT_FEE ->
      <<-9:32>>;
    txBAD_AUTH_EXTRA ->
      <<-10:32>>;
    txINTERNAL_ERROR ->
      <<-11:32>>
  end.

dec_TransactionResultCode(_1, _2) ->
  begin
    <<_:_2/binary, _3:32, _/binary>> = _1,
    case _3 of
      0 ->
        {txSUCCESS, _2 + 4};
      -1 ->
        {txFAILED, _2 + 4};
      -2 ->
        {txTOO_EARLY, _2 + 4};
      -3 ->
        {txTOO_LATE, _2 + 4};
      -4 ->
        {txMISSING_OPERATION, _2 + 4};
      -5 ->
        {txBAD_SEQ, _2 + 4};
      -6 ->
        {txBAD_AUTH, _2 + 4};
      -7 ->
        {txINSUFFICIENT_BALANCE, _2 + 4};
      -8 ->
        {txNO_ACCOUNT, _2 + 4};
      -9 ->
        {txINSUFFICIENT_FEE, _2 + 4};
      -10 ->
        {txBAD_AUTH_EXTRA, _2 + 4};
      -11 ->
        {txINTERNAL_ERROR, _2 + 4}
    end
  end.

dec_TransactionResultCode_i2a(_4) ->
  case _4 of
    0 ->
      txSUCCESS;
    -1 ->
      txFAILED;
    -2 ->
      txTOO_EARLY;
    -3 ->
      txTOO_LATE;
    -4 ->
      txMISSING_OPERATION;
    -5 ->
      txBAD_SEQ;
    -6 ->
      txBAD_AUTH;
    -7 ->
      txINSUFFICIENT_BALANCE;
    -8 ->
      txNO_ACCOUNT;
    -9 ->
      txINSUFFICIENT_FEE;
    -10 ->
      txBAD_AUTH_EXTRA;
    -11 ->
      txINTERNAL_ERROR
  end.

enc_TransactionResult(_1) ->
  case _1 of
    {_12, _5, _2} ->
      [enc_int64(_12),
        case _5 of
          {_6, _7} ->
            [enc_TransactionResultCode(_6),
              case _6 of
                txSUCCESS ->
                  begin
                    _11 = length(_7),
                    [<<_11:32/unsigned>>,
                      lists:map(fun(_10) ->
                        enc_OperationResult(_10)
                                end,
                        _7)]
                  end;
                txFAILED ->
                  begin
                    _9 = length(_7),
                    [<<_9:32/unsigned>>,
                      lists:map(fun(_8) ->
                        enc_OperationResult(_8)
                                end,
                        _7)]
                  end;
                _ ->
                  []
              end]
        end,
        case _2 of
          {_3, _4} ->
            [<<_3:32>>,
              case _3 of
                0 ->
                  []
              end]
        end]
  end.

dec_TransactionResult(_1, _2) ->
  begin
    {_3, _4} = dec_int64(_1, _2),
    {_5, _6} =
      begin
        <<_:_4/binary, _7:32/signed, _/binary>> = _1,
        _10 = _4 + 4,
        case _7 of
          0 ->
            {_8, _9} =
              begin
                <<_:_10/binary, _15:32/unsigned, _/binary>> =
                  _1,
                map_elem(fun(_16, _17) ->
                  dec_OperationResult(_16,
                    _17)
                         end,
                  _1,
                  _10 + 4,
                  infinity,
                  _15)
              end,
            {{txSUCCESS, _8}, _9};
          -1 ->
            {_8, _9} =
              begin
                <<_:_10/binary, _12:32/unsigned, _/binary>> =
                  _1,
                map_elem(fun(_13, _14) ->
                  dec_OperationResult(_13,
                    _14)
                         end,
                  _1,
                  _10 + 4,
                  infinity,
                  _12)
              end,
            {{txFAILED, _8}, _9};
          _ ->
            {_8, _9} = {void, _10},
            _11 = dec_TransactionResultCode_i2a(_7),
            {{_11, _8}, _9}
        end
      end,
    {_18, _19} =
      begin
        <<_:_6/binary, _20:32/signed, _/binary>> = _1,
        _23 = _6 + 4,
        case _20 of
          0 ->
            {_21, _22} = {void, _23},
            {{0, _21}, _22}
        end
      end,
    {{_3, _5, _18}, _19}
  end.

map_elem(Fun, Bin, Off, infinity, N) ->
  map_elem0(Fun, Bin, Off, N, []);
map_elem(Fun, Bin, Off, Max, N) when N =< Max ->
  map_elem0(Fun, Bin, Off, N, []).

map_elem0(Fun, Bin, Off, 0, L) ->
  {lists:reverse(L, []), Off};
map_elem0(Fun, Bin, Off, N, L) ->
  {E, Off1} = Fun(Bin, Off),
  map_elem0(Fun, Bin, Off1, N - 1, [E | L]).

io_list_len(L) -> io_list_len(L, 0).
io_list_len([H | T], N) ->
  if
    H >= 0, H =< 255 -> io_list_len(T, N + 1);
    is_list(H) -> io_list_len(T, io_list_len(H, N));
    is_binary(H) -> io_list_len(T, size(H) + N);
    true -> exit({xdr, opaque})
  end;
io_list_len(H, N) when is_binary(H) ->
  size(H) + N;
io_list_len([], N) ->
  N.

enc_align(Len) ->
  case Len rem 4 of
    0 -> <<>>;
    1 -> <<0, 0, 0>>;
    2 -> <<0, 0>>;
    3 -> <<0>>
  end.

align(Len) ->
  case Len rem 4 of
    0 -> Len;
    1 -> Len + 3;
    2 -> Len + 2;
    3 -> Len + 1
  end.
